# -*- coding: utf-8 -*-
"""Ejercicio_Regresion_Lineal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1biLlK5J7QD9LR1HQZ16ZKaZ6U56uJo-Z

# Ejercicio de Regresión Lineal

En este notebook intentaremos predecir el monto de una transacción con Machine Learning segun algunas de sus características.

## Predicción: ¿Cuánto será el valor estimado de una transacción?

Vamos a comenzar por Importar y Visualizar los datos
"""

# Commented out IPython magic to ensure Python compatibility.
# Imports necesarios
import numpy as np
import pandas as pd
import seaborn as sb
import matplotlib.pyplot as plt
# %matplotlib inline
from mpl_toolkits.mplot3d import Axes3D
from matplotlib import cm
plt.rcParams['figure.figsize'] = (16, 9)
plt.style.use('ggplot')
from sklearn import linear_model
from sklearn.metrics import mean_squared_error, r2_score

#cargamos los datos de entrada
data = pd.read_csv("./fraudTrain.csv")

#veamos cuantas dimensiones y registros contiene
data.shape

#son 1,296,675 registros con 23 columnas. Veamos los primeros registros para tener una idea
data.head()

"""Hasta el momento no hemos encontrado en el head valores nulos.

En nuestro caso la columna is_fraud será nuestra salida, es decir nuestro valor "Y", el valor que queremos predecir
"""

# Ahora veamos algunas estadísticas de nuestros datos
data.describe()

"""De aqui observamos que el monto máximo que ha tenido una transacción es de $28,948.90.

Así mismo, el valor mínimo de las transacción fue de $1.00.

Y en cuanto a las salidas, vemos que en promedio hay más transacciones verídicas que fraudes.

## Visualización General
"""

# Visualizamos rápidamente las caraterísticas de entrada
data.hist()
plt.show()

"""## Visualizamos Monto de la Transacción vs. Fraudes"""

#vamos a Visualizar los datos de entrada
colores=['orange','blue']
tamanios=[30,60]

f1 = data['amt'].values
f2 = data['is_fraud'].values

# Vamos a pintar en 2 colores los puntos por debajo de la media de Fraudes
asignar=[]
for index, row in data.iterrows():
    if(row['is_fraud']==1):
        asignar.append(colores[0])
    else:
        asignar.append(colores[1])
    
plt.scatter(f1, f2, c=asignar, s=tamanios[0])
plt.show()

# Vamos a RECORTAR los datos en la zona donde se concentran más los puntos
# esto es en el eje X: entre 0 y 20,000
filtered_data = data[(data['amt'] <= 5000)]

f1 = filtered_data['amt'].values
f2 = filtered_data['is_fraud'].values

# Vamos a pintar en colores los puntos por debajo y por encima de la media de Cantidad de Palabras
asignar=[]
for index, row in filtered_data.iterrows():
    if(row['is_fraud']==1):
        asignar.append(colores[0])
    else:
        asignar.append(colores[1])
    
plt.scatter(f1, f2, c=asignar, s=tamanios[0])
plt.show()

# Veamos como cambian los valores una vez filtrados
filtered_data.describe()

"""## Regresión Lineal Simple (1 variable)

Vamos a intentar primero una Regresión Lineal con 1 sóla variable
"""

# Asignamos nuestra variable de entrada X para entrenamiento y las etiquetas Y.
dataX =filtered_data[["amt"]]
X_train = np.array(dataX)
y_train = filtered_data['is_fraud'].values

# Creamos el objeto de Regresión Linear
regr = linear_model.LinearRegression()

# Entrenamos nuestro modelo
regr.fit(X_train, y_train)

# Hacemos las predicciones que en definitiva generan una línea (en este caso, al ser 2D)
y_pred = regr.predict(X_train)

# Veamos los coeficienetes obtenidos, En nuestro caso, serán la Tangente
print('Coefficients: \n', regr.coef_)
# Este es el valor donde corta el eje Y (en X=0)
print('Independent term: \n', regr.intercept_)
# Error Cuadrado Medio
print("Mean squared error: %.2f" % mean_squared_error(y_train, y_pred))
# Puntaje de Varianza. El mejor puntaje es un 1.0
print('Variance score: %.2f' % r2_score(y_train, y_pred))

"""## Visualizamos la Recta que obtuvimos"""

plt.scatter(X_train[:,0], y_train,  c=asignar, s=tamanios[0])
plt.plot(X_train[:,0], y_pred, color='red', linewidth=3)

plt.xlabel('Monto de la Transacción')
plt.ylabel('¿Es fraude?')
plt.title('Regresión Lineal')

plt.show()

"""### Predicción 1"""

#Vamos a comprobar:
# Quiero predecir cuántos si es fraudulenta una transacción por un monto de $1000.00,
# según nuestro modelo, hacemos:
y_diez = regr.predict([[1000]])
print(int(y_diez))

"""Como se puede ver, el modelo no "entendió" bien cómo detectar un fraude pero creo que este resultado es muy bueno para analizarlo en el reporte de Word. :)"""